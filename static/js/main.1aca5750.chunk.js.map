{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","fetch","then","response","json","users","setState","this","Filteredmonsters","filter","toLowerCase","includes","toLocaleLowerCase","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2SAGaA,EAAO,SAACC,GAAD,OACf,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,mCAAML,EAAMI,QAAQE,KAApB,OACA,kCAAKN,EAAMI,QAAQG,MAAnB,WCHIC,EAAW,SAACR,GAErB,OACA,qBAAKC,UAAU,YAAf,SAEMD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACxB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCNlBM,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,uBAAOZ,UAAU,SACba,KAAK,SACLF,YAAaA,EACbG,SAAWF,MCgCJG,G,wDA/Bb,aAAc,IAAD,8BACX,gBACKC,MAAM,CACTR,SAAU,GACVS,YAAY,IAJH,E,qDAQb,WAAqB,IAAD,OAClBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAG,EAAKC,SAAS,CAACf,SAAUc,S,oBAGzC,WAAS,IAAD,OACN,EAAiCE,KAAKR,MAA9BR,EAAR,EAAQA,SAAUS,EAAlB,EAAkBA,YACZQ,EAAmBjB,EAASkB,QAAO,SAAAvB,GAAO,OAC9CA,EAAQE,KAAKsB,cAAcC,SAASX,EAAYY,wBAElD,OACE,sBAAK7B,UAAU,MAAf,UACE,iDACA,cAAC,EAAD,CACIW,YAAY,iBACZC,aAAe,SAAAkB,GAAC,OAAI,EAAKP,SAAS,CAACN,YAAaa,EAAEC,OAAOC,WAC7D,cAAC,EAAD,CAAUxB,SAAUiB,W,GA3BTQ,cCKJC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.1aca5750.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../card/card.styles.css'\r\n\r\nexport const Card = (props) =>(\r\n     <div className=\"card-container\">\r\n         <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\r\n         <h2> {props.monster.name} </h2>\r\n         <p> {props.monster.email} </p>\r\n     </div>\r\n)","import React from 'react';\r\nimport './card-list.style.css';\r\nimport { Card } from '../card/card.component';\r\n\r\nexport const CardList = (props) =>{\r\n    \r\n    return (\r\n    <div className=\"card-list\">\r\n        {\r\n          props.monsters.map(monster=>(\r\n            <Card key={monster.id} monster={monster} />\r\n          ))\r\n        }\r\n    </div>\r\n    )\r\n}","import React from \"react\";\r\n\r\nimport '../search-box/search-box.styles.css';\r\n\r\nexport const SearchBox = ({placeholder, handleChange }) =>(\r\n    <input className=\"search\" \r\n        type=\"search\" \r\n        placeholder={placeholder} \r\n        onChange={ handleChange}/>\r\n)","import React, { Component } from 'react';\n\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\n\nimport './App.css';\n\nclass  App extends Component {\n  \n  constructor(){\n    super();\n    this.state={\n      monsters: [],\n      searchField:''\n    };\n  };\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users=> this.setState({monsters: users}));\n  }\n\n  render(){\n    const { monsters, searchField} = this.state;\n    const Filteredmonsters = monsters.filter(monster=>\n      monster.name.toLowerCase().includes(searchField.toLocaleLowerCase())\n      );\n    return(\n      <div className=\"App\">\n        <h1>MONSTER ROLODEX</h1>\n        <SearchBox  \n            placeholder=\"search monster\" \n            handleChange={ e => this.setState({searchField: e.target.value})}/>\n        <CardList monsters={Filteredmonsters} />\n    </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}